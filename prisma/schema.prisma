generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model Blog {
  blogID       Int         @id @default(autoincrement())
  mainTitle    String
  description  String?
  views        Int         @default(0)
  createdDate  String
  creatorImage String?
  creatorName  String
  coverImage   String?
  tag          String
  allImages    AllImages[]
  titles       Title[]
}

model Title {
  titleID    Int         @id @default(autoincrement())
  title      String
  blogID     Int
  images     Image[]
  paragraphs Paragraph[]
  blog       Blog        @relation(fields: [blogID], references: [blogID], onDelete: Cascade)

  @@index([blogID], map: "Title_blogID_fkey")
}

model Paragraph {
  paragraph_id Int    @id @default(autoincrement())
  paragraph    String @db.VarChar(2000)
  titleID      Int
  title        Title  @relation(fields: [titleID], references: [titleID], onDelete: Cascade)

  @@index([titleID], map: "Paragraph_titleID_fkey")
}

model Image {
  imageID Int    @id @default(autoincrement())
  image   String
  titleID Int
  title   Title  @relation(fields: [titleID], references: [titleID], onDelete: Cascade)

  @@index([titleID], map: "Image_titleID_fkey")
}

model AllImages {
  imageID Int    @id @default(autoincrement())
  image   String
  blogID  Int
  blog    Blog   @relation(fields: [blogID], references: [blogID], onDelete: Cascade)

  @@index([blogID], map: "Title_blogID_fkey")
}

enum UserRole {
  ADMIN
  USER
}
